#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <string.h>
#include <stdarg.h>
#include <assert.h>
#include <limits.h>
#include <setjmp.h>
#include <sys/ucontext.h>
#include "RecIPE.h"

#define BUFFER_SIZE {config[buffer_size]}

char value_before[ADDR_SIZE];
char value_after[ADDR_SIZE];

static char a[BUFFER_SIZE] = "init";
static char b[BUFFER_SIZE] = "init";
static char c[BUFFER_SIZE] = "init";


//This is for data overflow
void vul()
{{
    assert(BUFFER_SIZE>=ADDR_SIZE);
    char *l[3] = {{a, b, c}};
    qsort(l, 3, ADDR_SIZE, ptraddr_compare);
    char *input_buffer = l[0];
    char *guard_buffer = l[1];
    {config[funcptr]}char *target = l[2];
    {config[funcptr]}*(size_t *)target = &foo;
    printf("bad_addr:%p\n", &jump_to_me);
    int offset = (void*)target - (void*)input_buffer;
    assert(offset>0);

    /* initialization */
    memset(input_buffer, INIT_CHAR, BUFFER_SIZE);
    memset(guard_buffer, GUARD_CHAR, BUFFER_SIZE);

    size_t csize = ADDR_SIZE;
    size_t readin_length =  csize;

    memcpy(value_before, target, ADDR_SIZE);

    char *readin_place = input_buffer + offset;
    
    {config[read]}read(0, readin_place, readin_length);
    if("//"=="{config[read]}"){{
        char readin_buffer[readin_length];
        read(0, readin_buffer, readin_length);
        {config[memcpy]}memcpy(readin_place, readin_buffer, readin_length);
        {config[bcopy]}bcopy(readin_buffer, readin_place, readin_length);
        {config[homebrew]}homebrew_memcpy(readin_place, readin_buffer, readin_length);
    }}

    memcpy(value_after, target, ADDR_SIZE);
    
    /* attack success checks */
    if(0!=guard_buffer_check(guard_buffer, BUFFER_SIZE)){{
        char log_string[] = "Attacked: OOB\n";
        recipe_log(log_string, sizeof(log_string));
    }}
	if(0!=memcmp(value_before, value_after, ADDR_SIZE)){{
        char log_string[] = "Attacked: target modified\n";
        recipe_log(log_string, sizeof(log_string));
    }}

    {config[funcptr]}void (*funcptr)() = *(size_t *)target;
    {config[funcptr]}funcptr();
}}

int main()
{{
    remove_files();
    setvbuf(stdout, 0, 2, 0);
    setvbuf(stdin, 0, 2, 0);
    vul();
}}
