[DEFAULT]
# version
v = 1.0.0

[CONFIG]
# arch: 32 or 64. 
arch = 64 
# recipe checks the existance of this file to get result of exploits.
check_file = /tmp/recipe_check
# recipe checks the content of this file to get result of attacks.
log_file = /tmp/recipe_log
# bad command
bad_cmd = touch /tmp/recipe_check
# init char
init_char = \xaa
# guard char
guard_char = \xcc
# compile cmd

# Baseline: 
# compile_cmd = gcc -g -w -D_FORTIFY_SOURCE=0 -no-pie -fno-stack-protector -z execstack -z norelro -fcf-protection=none

# Stack Protector:
# compile_cmd = gcc -g -w -D_FORTIFY_SOURCE=0 -no-pie -z execstack -z norelro -fstack-protector-strong -fcf-protection=none

# D Fortify:
# compile_cmd = gcc -g -w -D_FORTIFY_SOURCE=2 -O2 -no-pie -z execstack -z norelro -fno-stack-protector -fcf-protection=none
# compile_cmd = gcc -g -w -D_FORTIFY_SOURCE=3 -O2 -no-pie -z execstack -z norelro -fno-stack-protector -fcf-protection=none

# # Shadow Stack
# compile_cmd =  gcc -g -w -D_FORTIFY_SOURCE=0 -no-pie -z execstack -z norelro -fno-stack-protector -fcf-protection=return

# IBT 
compile_cmd =  gcc -g -w -D_FORTIFY_SOURCE=0 -no-pie -z execstack -z norelro -fno-stack-protector -fcf-protection=branch

# Stack Protector + D Fortify
# compile_cmd = gcc -g -w -no-pie -z execstack -z norelro -fstack-protector-strong -D_FORTIFY_SOURCE=3 -O2 -fcf-protection=none

# Stack Protector + D Fortify + Mkshtk
# compile_cmd = gcc -g -w -no-pie -z execstack -z norelro -fstack-protector-strong -D_FORTIFY_SOURCE=3 -O2 -fcf-protection=return

# All
# compile_cmd = gcc -g -w -no-pie -z execstack -z norelro -fstack-protector-strong -D_FORTIFY_SOURCE=3 -O2 -fcf-protection=full

[TestGenAttr]
# NOTE: set every attr you like, RecIPE would try combine them to generate test cases. Splitter=,
# attr1-region 
regions = stack,heap,data,bss
# attr2-tech
techniques = BoundOFlow,NBoundOFlow,OOBPtrHijack,PtrHijack,StructOFlow,NBoundUFlow
# attr3-target
targets = retaddr,oldebp,funcptr,GOT,jmpbuf
# attr4-function
functions = read,memcpy,bcopy,homebrew

# Replicating discrepancies

# regions = stack,heap,data,bss
# techniques = NBoundOFlow
# targets = jmpbuf
# functions = memcpy,bcopy,homebrew



